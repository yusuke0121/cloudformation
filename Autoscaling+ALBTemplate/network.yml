AWSTemplateFormatVersion: 2010-09-09


Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

    ParameterLabels:
      VPCCIDR:
        default: "VPC CIDR"
      PublicSubnet1CIDR:
        default: "PublicSubnet1 CIDR"
      PublicSubnet2CIDR:
        default: "PublicSubnet2 CIDR"
      PrivateSubnet1CIDR:
        default: "PrivateSubnet1 CIDR"
      PrivateSubnet2CIDR:
        default: "PrivateSubnet2 CIDR"          


Parameters:
  VPCCIDR:
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet1CIDR:
    Type: String
    Default: "10.0.0.0/24"

  PublicSubnet2CIDR:
    Type: String
    Default: "10.0.1.0/24"

  PrivateSubnet1CIDR:
    Type: String
    Default: "10.0.100.0/24"

  PrivateSubnet2CIDR:
    Type: String
    Default: "10.0.200.0/24"










Resources:

  # VPCの作成
  testvpc1:
    Type: AWS::EC2::VPC
    Properties: 
     CidrBlock: !Ref VPCCIDR
     EnableDnsSupport: true
     EnableDnsHostnames: true    
     Tags: 
     - Key: Name
       Value: test_vpc1

  # インターネットゲートウェイの作成  
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
     Tags: 
     - Key: Name
       Value: IGW_test1


  # VPCへインターネットゲートウェイをアタッチ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref testvpc1
      InternetGatewayId: !Ref IGW


  # パブリックサブネットの作成
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testvpc1
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true  
      Tags:
      - Key: Name
        Value: test_subnetA    
  
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testvpc1
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: test_subnetB


  # プライベートサブネットの作成
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testvpc1
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
      - Key: Name
        Value: test_subnetC

  mySubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testvpc1
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
      - Key: Name
        Value: test_subnetD              


# ルートテーブルの作成
  Routetable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref testvpc1
      Tags: 
      - Key: Name
        Value: test_subnetA_RT

  
  Routetable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref testvpc1
      Tags: 
      - Key: Name
        Value: test_subnetB_RT        

  # ルーティング
  PubSubToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Routetable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW          


  # サブネットの関連付け
  AssoPubSubRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet1      
      RouteTableId: !Ref Routetable1

  AssoPubSubRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet2     
      RouteTableId: !Ref Routetable1

  AssoPubSubRT3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet3     
      RouteTableId: !Ref Routetable2

  AssoPubSubRT4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet4    
      RouteTableId: !Ref Routetable2  

  # ALBの作成
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      LoadBalancerAttributes: 
        - Key: idle_timeout.timeout_seconds
          Value: 140
      Name: ALBTest
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref mySubnet1
        - !Ref mySubnet2 

  # ターゲットグループ
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher: 
        HttpCode: 200
      Name: TestTarget
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref testvpc1
  
  # リスナー設定
  Listner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

      

  # EC2セキュリティグループ
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22 80
      VpcId: !Ref testvpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId

  # ALBセキュリティグループ
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SecurityGroup alb-grp
      VpcId: !Ref testvpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0


  # RDSセキュリティグループ
  DBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SecurityGroup rds-grp
      VpcId: !Ref testvpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId      


Outputs:
  mySubnet1:
    Value: !Ref mySubnet1
    Export:
      Name: PublicSubnet1
  mySubnet2:
    Value: !Ref mySubnet2
    Export:
      Name: PublicSubnet2
  mySubnet3:
    Value: !Ref mySubnet3
    Export:
      Name: PublicSubnet3
  mySubnet4:
    Value: !Ref mySubnet4
    Export:
      Name: PublicSubnet4                  
  InstanceSecurityGroup:
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: ec2SecurityGroup
  DBInstanceSecurityGroup:
    Value: !Ref DBInstanceSecurityGroup
    Export:
      Name: RDSSecurityGroup        
  TargetGroup:
    Value: !Ref TargetGroup
    Export:
      Name: ALBTargetGroup
                                








  

  